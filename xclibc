#!/bin/bash
# Author: e4l4

usage_dowload() {
  echo >&2 "Usage: $0 id"
  exit 2
}

usage_extract() {
  echo -e >&2 "Usage: $0 deb output"
  exit 2
}

die() {
  echo >&2 $1
  exit 1
}

get_arch() {
    local x86="X86-64"
    local x32="80386"
    local data=$(readelf -h $1)
    if [[ $data =~ $x86 ]];then
        arch='amd64'
    elif [[ $data =~ $x32 ]];then
        arch='i386'
    else 
        echo "no"
        exit 1
    fi
}

get_ver() {
    buf=$(strings $libcname |grep "GNU C Library" |awk '{print $6}')
    libcversion=${buf%*)}
    buf=$(strings $libcname |grep "GNU C Library" |awk '{print $6}')
    version=${buf%-*}
}

extract() {
    if [[ $# -ne 2 ]]; then
        usage_extract
    fi
    local deb=`readlink -f $1`
    local out=$2
    if [ ! -d "$out" ]; then
        mkdir $out
    fi
    local tmp=`mktemp -d`

    cd $tmp
    ar xv $deb || die "ar failed"
    if [ -f "data.tar.zst" ];then
        tar -I zstd -xf data.tar.* || die "tar failed"
    else
        tar xf data.tar.* || die "tar failed"
    fi
    cd -

    cp -rP $tmp/lib/*/* $out 2>/dev/null \
      || cp -rP $tmp/lib32/* $out 2>/dev/null \
      || cp -rP $tmp/usr/lib/debug/lib/*/* $out 2>/dev/null \
      || cp -rP $tmp/usr/lib/debug/lib32/* $out 2>/dev/null \
      || cp -rP $tmp/usr/lib/debug/.build-id $out 2>/dev/null \
      || die "Failed to save. Check it manually $tmp"

    rm -rf $tmp
}

clibc() {
    FILE_NAME=$1
    LIBC_VERSION=$2
    LIBC_DIR=$HOME/glibc-all-in-one
    libc_dir=$(find $LIBC_DIR -name "$LIBC_VERSION*")
    if [ "$libc_dir" = "" ];then
        echo "Not support version or your $LIBC_DIR don't have libc"
        exit
    fi
    if  [ "$3" ] 
    then
        if [[ $(echo "$LIBC_VERSION >= 2.34"|bc) -eq 1 ]] || [ "$3" == "$HOME/glibc-all-in-one/libs/2.31-0ubuntu9.10_amd64" ] || [ "$3" == "$HOME/glibc-all-in-one/libs/2.31-0ubuntu9.10_i386" ] || [ "$3" == "$HOME/glibc-all-in-one/libs/2.31-0ubuntu9.9_amd64" ] || [ "$3" == "$HOME/glibc-all-in-one/libs/2.31-0ubuntu9.9_i386" ]; then
            Record $1
            patchelf --set-interpreter $3/ld-linux-x86-64.so.2 --set-rpath $3/ $1
            sudo rm -rf /usr/lib/debug/.build-id/
            sudo cp -r $3/.debug/.build-id/ /usr/lib/debug
            die "[+]success"
        else
        Record $1
        patchelf --set-interpreter $3/ld-$LIBC_VERSION.so --set-rpath $3/ $1
        die "[+]success"
        fi
    else
        printf '%s\n' "$libc_dir"
        echo -e '\033[32mPlease specify the directory \033[0m'
    fi
}
clibc_n() {
    FILE_NAME=$1
    LIBC_VERSION=$2
    LIBC_DIR=$HOME/glibc-all-in-one
    libc_dir=$(find $LIBC_DIR -name "$LIBC_VERSION*")
    if [ "$libc_dir" = "" ];then
        echo "Not support version or your $LIBC_DIR don't have libc"
        exit
    fi
    if  [ "$3" ] 
    then
        if [[ $(echo "$LIBC_VERSION >= 2.34"|bc) -eq 1 ]] || [ "$3" == "$HOME/glibc-all-in-one/libs/2.31-0ubuntu9.10_amd64" ] || [ "$3" == "$HOME/glibc-all-in-one/libs/2.31-0ubuntu9.10_i386" ] || [ "$3" == "$HOME/glibc-all-in-one/libs/2.31-0ubuntu9.9_amd64" ] || [ "$3" == "$HOME/glibc-all-in-one/libs/2.31-0ubuntu9.9_i386" ]; then
            Record $1
            patchelf --set-interpreter $3/ld-linux-x86-64.so.2 --replace-needed libc.so.6 $3/libc.so.6 $1
            sudo rm -rf /usr/lib/debug/.build-id/
            sudo cp -r $3/.debug/.build-id/ /usr/lib/debug
            die "[+]success"
        else
        Record $1
        patchelf --set-interpreter $3/ld-$LIBC_VERSION.so --replace-needed libc.so.6 $3/libc-$LIBC_VERSION.so $1
        die "[+]success"
        fi
    else
        printf '%s\n' "$libc_dir"
        echo -e '\033[32mPlease specify the directory \033[0m'
    fi
}


download_rpath() {
    id=$libcversion'_'$arch
    local LIBC_PREFIX="libc6_"
    local LIBC_DBG_PREFIX="libc6-dbg_"
    local deb_name=$LIBC_PREFIX$id.deb
    local dbg_name=$LIBC_DBG_PREFIX$id.deb
    echo "Getting $id"
    if [ -d "$LIBC_DIR/libs/$id" ]; then
        clibc $filename $version $LIBC_DIR/libs/$id
        die "[+]success"
    fi
    # download binary package
    url="$SOURCE/$deb_name"
    echo "  -> Location: $url"
    echo "  -> Downloading libc binary package"
    sudo wget "$url" 2>/dev/null -O $LIBC_DIR/debs/$deb_name || download_old_rpath
    echo "  -> Extracting libc binary package"
    mkdir $LIBC_DIR/libs/$id
    extract $LIBC_DIR/debs/$deb_name $LIBC_DIR/libs/$id
    echo "  -> Package saved to $LIBC_DIR/libs/$id"

    # download debug info package
    url="$SOURCE/$dbg_name"
    echo "  -> Location: $url"
    echo "  -> Downloading libc debug package"
    sudo wget "$url" 2>/dev/null -O $LIBC_DIR/debs/$dbg_name || download_old_rpath
    echo "  -> Extracting libc debug package"
    mkdir $LIBC_DIR/libs/$id/.debug
    extract $LIBC_DIR/debs/$dbg_name $LIBC_DIR/libs/$id/.debug
    echo "  -> Package saved to $LIBC_DIR/libs/$id/.debug"
    
    clibc $filename $version $LIBC_DIR/libs/$id
    die "[+]success"
}

download_old_rpath(){
    id=$libcversion'_'$arch
    local LIBC_PREFIX="libc6_"
    local LIBC_DBG_PREFIX="libc6-dbg_"
    local deb_name=$LIBC_PREFIX$id.deb
    local dbg_name=$LIBC_DBG_PREFIX$id.deb
    echo "Getting $id"
    if [ -d "$LIBC_DIR/libs/$id" ]; then
        clibc $filename $version $LIBC_DIR/libs/$id
        die "[+]success"
    fi
    # download binary package
    url="$OLD_SOURCE/$deb_name"
    echo "  -> Location: $url"
    echo "  -> Downloading libc binary package"
    sudo wget "$url" 2>/dev/null -O $LIBC_DIR/debs/$deb_name || die "Failed to download package from $url"
    echo "  -> Extracting libc binary package"

    mkdir $LIBC_DIR/libs/$id
    extract $LIBC_DIR/debs/$deb_name $LIBC_DIR/libs/$id
    echo "  -> Package saved to $LIBC_DIR/$libs/$id"

    # download debug info package
    url="$OLD_SOURCE/$dbg_name"
    echo "  -> Location: $url"
    echo "  -> Downloading libc debug package"
    sudo wget "$url" 2>/dev/null -O $LIBC_DIR/debs/$dbg_name || die "Failed to download package from $url"
    echo "  -> Extracting libc debug package"
    mkdir $LIBC_DIR/libs/$id/.debug
    extract $LIBC_DIR/debs/$dbg_name $LIBC_DIR/libs/$id/.debug
    echo "  -> Package saved to $LIBC_DIR/libs/$id/.debug"
    clibc $filename $version $LIBC_DIR/libs/$id
    die "[+]success"
}

download_need() {
    id=$libcversion'_'$arch
    local LIBC_PREFIX="libc6_"
    local LIBC_DBG_PREFIX="libc6-dbg_"
    local deb_name=$LIBC_PREFIX$id.deb
    local dbg_name=$LIBC_DBG_PREFIX$id.deb
    echo "Getting $id"
    if [ -d "$LIBC_DIR/libs/$id" ]; then
        clibc_n $filename $version $LIBC_DIR/libs/$id
        die "[+]success"
    fi
    # download binary package
    url="$SOURCE/$deb_name"
    echo "  -> Location: $url"
    echo "  -> Downloading libc binary package"
    sudo wget "$url" 2>/dev/null -O $LIBC_DIR/debs/$deb_name || download_old_need
    echo "  -> Extracting libc binary package"
    mkdir $LIBC_DIR/libs/$id
    extract $LIBC_DIR/debs/$deb_name $LIBC_DIR/libs/$id
    echo "  -> Package saved to $LIBC_DIR/libs/$id"

    # download debug info package
    url="$SOURCE/$dbg_name"
    echo "  -> Location: $url"
    echo "  -> Downloading libc debug package"
    sudo wget "$url" 2>/dev/null -O $LIBC_DIR/debs/$dbg_name || download_old_need
    echo "  -> Extracting libc debug package"
    mkdir $LIBC_DIR/libs/$id/.debug
    extract $LIBC_DIR/debs/$dbg_name $LIBC_DIR/libs/$id/.debug
    echo "  -> Package saved to $LIBC_DIR/libs/$id/.debug"
    clibc_n $filename $version $LIBC_DIR/libs/$id
    die "[+]success"
}
download_old_need(){
    id=$libcversion'_'$arch
    local LIBC_PREFIX="libc6_"
    local LIBC_DBG_PREFIX="libc6-dbg_"
    local deb_name=$LIBC_PREFIX$id.deb
    local dbg_name=$LIBC_DBG_PREFIX$id.deb
    echo "Getting $id"
    if [ -d "$LIBC_DIR/libs/$id" ]; then
        clibc_n $filename $version $LIBC_DIR/libs/$id
        die "[+]success"
    fi
    # download binary package
    url="$OLD_SOURCE/$deb_name"
    echo "  -> Location: $url"
    echo "  -> Downloading libc binary package"
    sudo wget "$url" 2>/dev/null -O $LIBC_DIR/debs/$deb_name || die "Failed to download package from $url"
    echo "  -> Extracting libc binary package"

    mkdir $LIBC_DIR/libs/$id
    extract $LIBC_DIR/debs/$deb_name $LIBC_DIR/libs/$id
    echo "  -> Package saved to $LIBC_DIR/libs/$id"

    # download debug info package
    url="$OLD_SOURCE/$dbg_name"
    echo "  -> Location: $url"
    echo "  -> Downloading libc debug package"
    sudo wget "$url" 2>/dev/null -O $LIBC_DIR/debs/$dbg_name || die "Failed to download package from $url"
    echo "  -> Extracting libc debug package"
    mkdir $LIBC_DIR/libs/$id/.debug
    extract $LIBC_DIR/debs/$dbg_name $LIBC_DIR/libs/$id/.debug
    echo "  -> Package saved to $LIBC_DIR/libs/$id/.debug"
    clibc_n $filename $version $LIBC_DIR/libs/$id
    die "[+]success"
}

Record(){
    if [ -e $1.bak ];then
        cp $1.bak $1
    else
        cp $1 $1.bak
    fi
}

download_libc(){
    if [ -z "$1" ]; then
        # echo -e '\033[32m[+]Please wait for updates \033[0m'
        # $HOME/glibc-all-in-one/update_list
        echo -e '\033[32m[+]Select the version you want to download \033[0m'
        echo -e '\033[34mBlue\033[0m is downloadable \033[32mGreen\033[0m is already downloaded'
        echo ''

        # blue
        light_blue=$(tput setaf 4)
        # green
        green=$(tput setaf 2)

        reset=$(tput sgr0)

        mkdir -p "$HOME/glibc-all-in-one/libs"

        find "$HOME/glibc-all-in-one/libs" -maxdepth 1 -type d -exec sh -c '[ "$(basename {})" != "libs" ] && echo "$(basename {})"' \;  > $HOME/glibc-all-in-one/libs/libs.txt

        sort -u "$HOME/glibc-all-in-one/list" "$HOME/glibc-all-in-one/old_list" $HOME/glibc-all-in-one/libs/libs.txt | while read line
        do
            if grep -Fxq "$line" $HOME/glibc-all-in-one/libs/libs.txt
            then
                echo "${green}${line}${reset}"
            else
                echo "${light_blue}${line}${reset}"
            fi
        done | column

        rm $HOME/glibc-all-in-one/libs/libs.txt
    else
        if [ "$1" ]; then
            if [ "$1" = "all" ]; then
                version_count=$(cat "$HOME/glibc-all-in-one/list" "$HOME/glibc-all-in-one/old_list" | wc -l)
                version_index=0
                while IFS= read -r version
                do
                    if grep -Fxq "$version" "$HOME/glibc-all-in-one/list"
                    then
                        "$HOME/glibc-all-in-one/download" "$version"
                    elif grep -Fxq "$version" "$HOME/glibc-all-in-one/old_list"
                    then
                        "$HOME/glibc-all-in-one/download_old" "$version"
                    fi
                    let version_index++
                    percent=$((100*version_index/version_count))
                    printf '\r[%-50s] %d%%' $(printf '%.0s#' $(seq 1 $((percent/2)))) $percent
                    echo
                done < <(cat "$HOME/glibc-all-in-one/list" "$HOME/glibc-all-in-one/old_list")
                echo
            elif grep -Fxq "$1" "$HOME/glibc-all-in-one/list"
            then
                "$HOME/glibc-all-in-one/download" "$1"
            elif grep -Fxq "$1" "$HOME/glibc-all-in-one/old_list"
            then
                "$HOME/glibc-all-in-one/download_old" "$1"
            elif [ -d "$HOME/glibc-all-in-one/libs/$1" ]
            then
                echo "This version already exists and there is no download method。"
            else
                echo "Unknown version: $1"
            fi
        fi
    fi
}




while getopts 's:x:hvc:e:r:d' OPT
do
    case $OPT in
        s) 
        libcname=$OPTARG
        get_ver
        echo -e "\033[32mLIBC_VERSION: \033[0m"$libcversion
        ;;
        x)
        if [ "$2" = "-n" ];then
            filename=$3
            libcname=$4
            LIBC_DIR=$HOME/glibc-all-in-one
            SOURCE="https://mirror.tuna.tsinghua.edu.cn/ubuntu/pool/main/g/glibc"
            OLD_SOURCE="http://old-releases.ubuntu.com/ubuntu/pool/main/g/glibc"
            get_arch "$4"
            get_ver
            download_need
        else  
            filename=$2
            libcname=$3
            LIBC_DIR=$HOME/glibc-all-in-one
            SOURCE="https://mirror.tuna.tsinghua.edu.cn/ubuntu/pool/main/g/glibc"
            OLD_SOURCE="http://old-releases.ubuntu.com/ubuntu/pool/main/g/glibc"
            get_arch "$3"
            get_ver
            download_rpath
        fi
        ;;
        c)
        if [ "$2" = "-n" ];then
            clibc_n $3 $4 $5
        else
            clibc $2 $3 $4
        fi
        ;;
        e)
        LIBC_PREFIX="libc6_"
        LIBC_DBG_PREFIX="libc6-dbg_"
        LIBC_DIR=$HOME/glibc-all-in-one/
        deb=$2
        fondername0=${deb#*_}
        fondername=${fondername0%.*}
        if [ -d $HOME/glibc-all-in-one/libs/$fondername ];then
            echo -e "[-]already exists, do overwrite"
        else
            mkdir $LIBC_DIR/libs/$fondername
            mkdir $LIBC_DIR/libs/$fondername/.debug
            echo -e "[+]create folder finish"
        fi
        if [[ $2 =~ $LIBC_DBG_PREFIX ]];then
            extract $2 $LIBC_DIR/libs/$fondername/.debug
            sudo chmod 755 -R $LIBC_DIR/libs/$fondername/.debug
        else 
            extract $2 $LIBC_DIR/libs/$fondername
            sudo chmod 755 -R $LIBC_DIR/libs/$fondername
        fi
        ;;
        r)
        if [ -e $2.bak ];then
            cp $2.bak $2
            echo -e "[+]restore!"
        else
            exit -1
        fi
        ;;
        d)
        download_libc $2
        ;;
        v)
        echo "xclibc v0.9"
        echo "------------------------"
        echo "|Update based on xclibc|"
        echo "|Writen by E4L4        |"
        echo "------------------------"
        exit -1
        ;;
        h)
        echo "Usage: xclibc [OPTION]...[FILE]..."
        echo "Change the libc environment for file running."
        echo ""
        echo "  -s,[libcfile]                        see the libc file version"
        echo "  -x,<-n> [file] [libcfile]            change the libc environment,-n:by modifying --replace-needed"
        echo "  -c,<-n> [file] [version] [dir]       change the specified libc version environment,-n:by modifying --replace-needed"
        echo "  -d,[version]                         download the libc version"
        echo "  -e,[deb]                             extract the deb to the glibc-all-in-one"
        echo "  -r,[file]                            restore original file"
        echo "  -h,                                  display this help and exit"
        echo "  -v,                                  output version information and exit"
        echo ""
        echo "Examples:"
        echo "  xclibc -x pwn libc.so.6"
        echo "        switch the version environment of the libc.so.6"
        echo "  xclibc -c pwn 2.35 [Enter]"
        echo "  xclibc -c pwn 2.35 /home/pwn/glibc-all-in-one/libs/2.35-0ubuntu3_amd64"
        echo "        you can switch the libc environment where the pwn file runs to 2.35-0ubuntu3_amd64"
        echo "  xclibc -d [Enter]"
        echo "  xclibc -d 2.37-0ubuntu2_amd64"
        echo "  xclibc -d all"
        echo "        you can download all the libc versions on the source"
        exit -1
        ;;
    esac
done
